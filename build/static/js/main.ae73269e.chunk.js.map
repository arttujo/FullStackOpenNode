{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","FilteringForm","props","handleSearchChange","search","onChange","value","AddPersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","PersonList","persons","deletePerson","personsToShow","filter","person","name","includes","map","key","number","onClick","confirm","window","console","log","deleteFromList","Notification","message","className","text","App","useState","setPersons","setNewName","setNewNumber","setMessage","setSearch","getAll","personService","create","deletePers","updatePers","useEffect","refreshData","messageHandler","setTimeout","event","target","preventDefault","personObj","match","length","catch","e","updatePerson","concat","status","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.ae73269e.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst deletePers = (newObject) => {\r\n  const id = newObject.id;\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((response) => response);\r\n};\r\n\r\nconst updatePers = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response);\r\n};\r\n\r\nexport default { getAll, create, deletePers, updatePers };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport personService from \"./services/persons\";\r\nimport \"./app.css\";\r\n\r\nconst ERROR = \"error\";\r\nconst SUCCESS = \"success\";\r\n\r\nconst FilteringForm = (props) => {\r\n  const { handleSearchChange, search } = props;\r\n  return (\r\n    <div>\r\n      Search\r\n      <input onChange={handleSearchChange} value={search}></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AddPersonForm = (props) => {\r\n  const {\r\n    addPerson,\r\n    newName,\r\n    handleNameChange,\r\n    newNumber,\r\n    handleNumberChange,\r\n  } = props;\r\n  return (\r\n    <div>\r\n      <form onSubmit={addPerson}>\r\n        <div>\r\n          name: <input value={newName} onChange={handleNameChange} />\r\n        </div>\r\n        <div>\r\n          number:{\" \"}\r\n          <input value={newNumber} onChange={handleNumberChange}></input>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PersonList = (props) => {\r\n  const { persons, search, deletePerson } = props;\r\n\r\n  const personsToShow = persons\r\n    ? persons.filter((person) => person.name.includes(search))\r\n    : persons;\r\n\r\n  const deleteFromList = (person) => {\r\n    const confirm = window.confirm(`Delete ${person.name}?`);\r\n    console.log(\"clicked on\", person);\r\n    if (confirm) {\r\n      console.log(\"delete\");\r\n      deletePerson(person);\r\n    } else {\r\n      console.log(\"cancel\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {personsToShow.map((person) => (\r\n          <li key={person.name}>\r\n            {person.name} {person.number}\r\n            <button\r\n              onClick={() => {\r\n                deleteFromList(person);\r\n              }}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  } else if (message.type === ERROR) {\r\n    return <div className=\"error\">{message.text}</div>;\r\n  } else {\r\n    return <div className=\"success\">{message.text}</div>;\r\n  }\r\n};\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([]);\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [newNumber, setNewNumber] = useState(\"\");\r\n  const [message, setMessage] = useState(null);\r\n  const [search, setSearch] = useState(\"\");\r\n  const { getAll, create, deletePers, updatePers } = personService;\r\n\r\n  useEffect(() => {\r\n    getAll().then((data) => {\r\n      console.log(data);\r\n      setPersons(data);\r\n    });\r\n  }, [getAll]);\r\n\r\n  const refreshData = () => {\r\n    getAll().then((data) => {\r\n      setPersons(data);\r\n      console.log(\"fetched data after delete\");\r\n    });\r\n  };\r\n\r\n  const messageHandler = (text, type) => {\r\n    setMessage({ text: text, type: type });\r\n    setTimeout(() => {\r\n      setMessage(null);\r\n    }, 5000);\r\n  };\r\n\r\n  const deletePerson = (person) => {\r\n    deletePers(person)\r\n      .then((response) => {\r\n        if (response.status === 204) {\r\n          messageHandler(`${person.name} was deleted`, SUCCESS);\r\n          refreshData();\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(\"error\", e);\r\n        messageHandler(\r\n          `${person.name} has already been removed from the phonebook!`,\r\n          ERROR\r\n        );\r\n      });\r\n  };\r\n\r\n  const updatePerson = (id,personObj) => {\r\n    updatePers(id, personObj)\r\n          .then((response) => {\r\n            console.log(\"update\", response);\r\n            messageHandler(\r\n              `Succesfully updated ${response.data.name} number to ${response.data.number}`,\r\n              SUCCESS\r\n            );\r\n            refreshData();\r\n          })\r\n          .catch((e) => {\r\n            console.log(e);\r\n            messageHandler(\r\n              `${personObj.name} cannot be edited. Person doesn't exist anymore`,\r\n              ERROR\r\n            );\r\n            refreshData();\r\n          });\r\n  }\r\n\r\n  const addPerson = (event) => {\r\n    event.preventDefault();\r\n    const personObj = { name: newName, number: newNumber };\r\n    const match = persons.filter((person) => {\r\n      return person.name === newName;\r\n    });\r\n    console.log(\"match\", match);\r\n    if (match.length > 0) {\r\n      const changeNumber = window.confirm(\r\n        `${newName} is already on the list. Want to update their number?`\r\n      );\r\n      if (changeNumber) {\r\n        console.log(\"change\");\r\n        updatePerson(match[0].id,personObj)\r\n      } else {\r\n        console.log(\"cancel\");\r\n      }\r\n    } else {\r\n      create(personObj).then((response) => {\r\n        console.log(\"create:\");\r\n        console.log(response);\r\n        messageHandler(`${response.name} was added!`, SUCCESS);\r\n        setPersons(persons.concat(response));\r\n      });\r\n      setNewName(\"\");\r\n      setNewNumber(\"\");\r\n    }\r\n  };\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value);\r\n  };\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearch(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={message}></Notification>\r\n      <FilteringForm\r\n        handleSearchChange={handleSearchChange}\r\n        search={search}\r\n      ></FilteringForm>\r\n      <h2>Add new contact</h2>\r\n      <AddPersonForm\r\n        addPerson={addPerson}\r\n        newName={newName}\r\n        handleNameChange={handleNameChange}\r\n        newNumber={newNumber}\r\n        handleNumberChange={handleNumberChange}\r\n      ></AddPersonForm>\r\n      <h2>Numbers</h2>\r\n      <PersonList\r\n        persons={persons}\r\n        search={search}\r\n        deletePerson={deletePerson}\r\n      ></PersonList>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}